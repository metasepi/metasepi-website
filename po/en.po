# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2013-09-14 14:57+0900\n"
"PO-Revision-Date: 2014-05-11 23:31+0900\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:1
#, no-wrap
msgid "---\n"
msgstr "---\n"

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:5
#, no-wrap
msgid ""
"title: デザインArafura\n"
"description: Metasepiの最初のアーキティクチャを決めるでゲソ!\n"
"tags: haskell, design, specification, bootloader\n"
"---\n"
msgstr ""
"title: Arafura Design\n"
"description: Get first design for Metasepi kernel.\n"
"tags: haskell, design, specification, bootloader\n"
"---\n"

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:11
msgid ""
"調査を繰り返していても、設計は進まないでゲソ。 まずは第一歩、なにか作ってみればわかることもあるんじゃなイカ？ "
"まずコードを書く前におおざっぱな設計を決めるでゲソ。 このエントリは何度も書き直すかもしれないでゲソ。"
msgstr "Can't get design, even repeating the research. It might be a good idea to make something at first step? Let's decide a rough sketch before writing the code. This blog entry will be rewritten some times."

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:13
msgid "## 最初のデザイン"
msgstr "## First design"

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:19
msgid ""
"[Haskell/OCaml製のOSって何があるんでゲソ？](2012-08-18-haskell-or-ocaml-os.html)  "
"でも書いたでゲソが、短時間でドッグフード可能 ^[開発対象のkernelの上で当該kernelの開発/コンパイルができるようになること] "
"なkernelを得るには、関数型言語としてキレイな設計を考えている時間はないでゲソ。 "
"むしろ純朴な実装で良いから、モノリシックkernelを関数型言語の設計に写像してしまった方が良いのではなイカ？"
msgstr ""
"We discuss \"[Are there OS designed with Haskell/OCaml?](2012-08-18-haskell-or-ocaml-os.html)\" already.\n"
"The person living in real world has no time to get clean design of Functional OS,\n"
"that be eaten as dog food.\n"
"^[[Eating your own dog food - Wikipedia](http://en.wikipedia.org/wiki/Eating_your_own_dog_food)]\n"
"It may be better than it to rewrite a just monolithic kernel with functional language."

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:22
msgid "ここでは写像するモノリシックkernelとしてNetBSDを選定するでゲソ。 ソースコードが読みやすい、などの理由があるでゲソが、単にワシの趣味でゲソ。"
msgstr "We selected the NetBSD as a monolithic kernel for rewriting. There is my hobby simply reasons, such as easy-to-read source code."

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:28
msgid ""
"このC言語で書かれたNetBSD kernelをいきなり型付き言語でスクラッチから書き直すのもやはりシンドイでゲソ。 もう少し楽できなイカ？ "
"そこでいきなり全部ではなく、コンパイル可能/実行可能な状態を保ちながら少しずつ型付き言語で同じ機能を再実装するでゲソ。 少しずつ型をつけていけば、 "
"いつかは全てのコードが型付き言語で動くようになるんじゃなイカ？"
msgstr "The rewrite from scratch in typed language suddenly the NetBSD kernel written in the C language also is still severe. I want a little more comfortable? So but not all suddenly, and re-implement the same functionality in the typed language a little bit at a time while keeping a compilable / executable state. If you go with the type little by little, all the code I might be to work with typed language one day?"

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:30
msgid "![](/draw/2012-12-27-arafura_design.png)"
msgstr "![](/draw/2012-12-27-arafura_design.png)"

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:42
msgid ""
"この「NetBSD kernelを型付き言語で少しずつ "
"[スナッチ](http://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%8A%E3%83%83%E3%83%81%E3%83%A3%E3%83%BC)  "
"する」というデザインを "
"[アラフラ](http://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%A9%E3%83%95%E3%83%A9%E6%B5%B7)  "
"([Arafura](http://en.wikipedia.org/wiki/Arafura_Sea))と呼ぼうと思うでゲソ。 "
"\"A\"からはじまる海の名前、最初の船出にはぴったりじゃなイカ! ^[また、コウイカの一種で色を変える小さなイカ [Metasepia "
"pfefferi](http://en.wikipedia.org/wiki/Metasepia_pfefferi)  "
"が住んでいて、アラフラは「自由人」を意味するポルトガル語の古語に由来そうでゲソ。 "
"でも\"珊瑚礁からなる浅瀬が多く、航行の障害となる箇所も多数ある\"そうでゲソ...] "
"もしこの海で航海に失敗しても、今度は\"B\"で始まる海(デザイン)を選べばいいんでゲソ。 合言葉は\"ネバーギブアップ\"でゲッソ!!!"
msgstr "I think it tries to call the Arafura this design of \"snatch little by little in the typed language NetBSD kernel\". That's good to sail the name of the sea starting from \"A\", the first! (Also, small squid to change the color is a type of cuttlefish, Metasepia pfefferi is lived, Arafura of the Portuguese, which means \"free man\" But. is the origin so the archaic word \"shallow consisting of a coral reef in many cases, where a failure of navigation also have a large number\" when you fail to sail in this sea if ...) Yes, the sea that begins with \"B\" this time it's okay if you choose (design). I'm \"Never give up\" the watchword!"

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:44
msgid "## やってみよう!"
msgstr "## Just do it!"

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:49
msgid ""
"これまでの調査でjhcがMetasepiの設計に使えそうなことが判明したでゲソ。 NetBSD "
"kernelは割り込みハンドラを作ったりしなければならないので、 もっと簡単なNetBSD "
"bootloaderを手始めにjhcを使ってスナッチしてみるでゲソ。 何事もトレーニングでゲッソ。"
msgstr ""
"We have known jhc may be useful to develop Metasepi kernel.\n"
"If snatch NetBSD kernel, we should write interrupt handler with Haskell language.\n"
"It's so difficult for us, today.\n"
"Then, let's snatch bootloader that has more easy design than NetBSD kernel.\n"
"Everything starts at training."

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:51
msgid "![](/draw/2012-12-27-loader.png)"
msgstr "![](/draw/2012-12-27-loader.png)"

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:55
msgid ""
"NetBSD bootloaderのモジュールの構造は上図のようになっているでゲソ。 "
"とりあえずboot2.cの中にあるコマンドラインループをjhcを使って書いてみたでゲソ。 "
"^[[元ソース](https://gitorious.org/metasepi/netbsd-arafura/blobs/52c9e9c31425bdf983d0850b4e503c899a511edc/metasepi-arafura/sys/arch/i386/stand/boot/Boot2Ara.hs)]"
msgstr ""
"Structure of the module of NetBSD bootloader is as shown in the above figure.\n"
"Following code is the boot2.c command line loop rewrited with jhc and Haskell language.\n"
"^[[Source code](https://gitorious.org/metasepi/netbsd-arafura/blobs/52c9e9c31425bdf983d0850b4e503c899a511edc/metasepi-arafura/sys/arch/i386/stand/boot/Boot2Ara.hs)]"

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:63
msgid ""
"~~~ {.haskell} import Control.Monad import Data.Maybe import Data.Map (Map)  "
"import qualified Data.Map as Map import Foreign.C.Types import Foreign.Ptr"
msgstr ""
"~~~ {.haskell}\n"
"import Control.Monad\n"
"import Data.Maybe\n"
"import Data.Map (Map)\n"
"import qualified Data.Map as Map\n"
"import Foreign.C.Types\n"
"import Foreign.Ptr"

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:65
msgid ""
"foreign import ccall \"glue_netbsdstand.h command_boot\" c_command_boot :: "
"Ptr a -> IO ()"
msgstr "foreign import ccall \"glue_netbsdstand.h command_boot\" c_command_boot :: Ptr a -> IO ()"

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:70
#, no-wrap
msgid ""
"commands :: Map String (IO ())\n"
"commands = Map.fromList [(\"help\", command_help),\n"
"                         (\"?\", command_help),\n"
"                         (\"boot\", c_command_boot nullPtr)]\n"
msgstr ""
"commands :: Map String (IO ())\n"
"commands = Map.fromList [(\"help\", command_help),\n"
"                         (\"?\", command_help),\n"
"                         (\"boot\", c_command_boot nullPtr)]\n"

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:79
#, no-wrap
msgid ""
"command_help :: IO ()\n"
"command_help = putStr $ \"\\\n"
"\\commands are:\\n\\\n"
"\\boot [xdNx:][filename] [-12acdqsvxz]\\n\\\n"
"\\     (ex. \\\"hd0a:netbsd.old -s\\\"\\n\\\n"
"--snip--\n"
"\\help|?\\n\\\n"
"\\quit\\n\"\n"
msgstr ""
"command_help :: IO ()\n"
"command_help = putStr $ \"\\\n"
"\\commands are:\\n\\\n"
"\\boot [xdNx:][filename] [-12acdqsvxz]\\n\\\n"
"\\     (ex. \\\"hd0a:netbsd.old -s\\\"\\n\\\n"
"--snip--\n"
"\\help|?\\n\\\n"
"\\quit\\n\"\n"

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:88
#, no-wrap
msgid ""
"main :: IO ()\n"
"main = do\n"
"  putStrLn \"Haskell bootmenu\"\n"
"  forever $ do\n"
"    putStr \"> \"\n"
"    s <- getLine\n"
"    fromMaybe (putStr s) $ Map.lookup s commands\n"
"~~~\n"
msgstr ""
"main :: IO ()\n"
"main = do\n"
"  putStrLn \"Haskell bootmenu\"\n"
"  forever $ do\n"
"    putStr \"> \"\n"
"    s <- getLine\n"
"    fromMaybe (putStr s) $ Map.lookup s commands\n"
"~~~\n"

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:92
msgid ""
"helpの表示はまぁいいとして、 kernelの読み込み+起動は既存コードにFFIで丸投げでゲソ。 "
"このソースコードをイカのような方法でコンパイルしてみるでゲソ。"
msgstr "Display of help is as good Well, I'm throwing circle at FFI to existing code reads + boot kernel. Let's compiled in such a way of utilizing these source code."

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:94
msgid "![](/draw/2012-12-27-compile.png)"
msgstr "![](/draw/2012-12-27-compile.png)"

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:97
msgid ""
"ほいでもってコンパイルして生成されたbootloaderバイナリをqemuで動かしてみるでゲッソ! (動画だと2:15ぐらいからMetasepi "
"arafura版bootloaderをqemu上で起動しているでゲソ。)"
msgstr "Let's run Metasepi arafura version of bootloader on qemu (2:15 at following video)!"

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:99
msgid ""
"<script type=\"text/javascript\" "
"src=\"http://ext.nicovideo.jp/thumb_watch/sm19788831\"></script><noscript><a "
"href=\"http://www.nicovideo.jp/watch/sm19788831\">【ニコニコ動画】Metasepi arafura "
"first boot.</a></noscript>"
msgstr "<iframe width=\"420\" height=\"315\" src=\"//www.youtube.com/embed/0DPA7GC0_-0\" frameborder=\"0\" allowfullscreen></iframe>"

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:104
msgid ""
"うん、helpの表示とkernelの起動はできているようでゲソ。まずは実験成功でゲソ! ところでくれぐれも勘違いしてほしくないのは、 "
"今回作ったbootloaderの99%はまだC言語製だということでゲソ。 "
"このbootloaderの動きをシーケンス図で描いてみるとイカのようになるでゲソ。"
msgstr "Starting the kernel and display of help seems to be. First I do not want to misunderstand earnestly by the way!'s Successful experiment, 99% of the bootloader that I made this time but that it's still made ​​by C language. It is as shown in the figure below and try to draw a sequence diagram the movement of this bootloader."

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:106
msgid "![](/draw/2013-01-09-sequence_diagram.png)"
msgstr "![](/draw/2013-01-09-sequence_diagram.png)"

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:110
msgid ""
"なんと残念!かんじんの部分は既存のC言語ソースコードのままでゲソ。 でもこれから少しずつスナッチを繰り返すことで、 "
"上図のシーケンスの多くの部分をHaskellのような型付き言語で記述することも夢ではないんじゃなイカ？"
msgstr "Part sorry! Bottom line remains the C language source code of existing what. But by repeating snatch little by little from now, be described in typed language like Haskell many parts of the sequence shown above and not something a dream?"

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:112
msgid "## 今見えている課題"
msgstr "## Known problems"

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:115
msgid ""
"まだbootloaderのスナッチははじまったばかりでゲソ。 "
"kernelのことはまぁ置いといて、こんな小さなモジュールをスナッチしてみるだけでも色々な課題が見えてくるでゲソ。"
msgstr ""
"Snatch of bootloader has just begun.\n"
"Not yet snatch kernel, we can find many problems with snatching the small module such as bootloader."

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:120
msgid ""
"a. コマンドライン引数を扱えるように b. カスタムRTSに起因する問題が頻発している。ユーザ空間でカスタムRTSをデバッグできた方がいい "
"c. "
"GCの使うヒープをallocで確保するのをやめて固定値に^[最悪1MB以降のメモリをヒープのために使っても良いが、他への応用を考えるとコンベンショナルメモリだけで挑戦する価値はある] "
"d. bootloaderのヒープをRTSのヒープと共用すると、RTSがヒープを圧迫する。分割管理すべき"
msgstr ""
"a. Be able to handle command-line arguments.\n"
"b. Should be able to debug custom RTS in user space. We have found problems at custom RTS side frequently.\n"
"c. Use the fixed memory area for GC heap allocator. ^[We can use extended memory (more than 1 MB) on Intel arch. But it's useful running in conventional memory (less than 1 MB) for the other use case]\n"
"d. Isolate malloc's heap and Haskell's heap. Haskell's heap press malloc's heap with the RTS implementation in this article."

#. type: Plain text
#: posts/2013-01-09-design_arafura.md:122
msgid "今年いっぱいはjhc本体の調査と平行して、 このbootloaderのスナッチは継続してやってみると色々な問題を洗い出せて面白いかもしれないでゲソ。"
msgstr ""
"Next action item is surveying more detail of jhc internel.\n"
"But, more snatching this bootloader may be also good idea to understand more problems."
